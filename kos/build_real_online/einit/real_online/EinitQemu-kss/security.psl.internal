/* Solution security policy */

use nk.base._

/* Including EDL files */
use EDL Einit
use EDL kl.core.Core

use EDL drone_controller.AutopilotConnector
use EDL drone_controller.CredentialManager
use EDL drone_controller.FlightController
use EDL drone_controller.NavigationSystem
use EDL drone_controller.PeripheryController
use EDL drone_controller.ServerConnector

use kl.drivers.BSP._
use kl.drivers.UART._
use kl.drivers.GPIO._
use wpa.WpaSupplicant._
use kl.VfsNet._
use kl.rump.Dhcpcd._
use kl.VfsSdCardFs._
use kl.EntropyEntity._
use kl.drivers.DNetSrv._
use kl.drivers.SDCard._
use kl.drivers.Bcm2711MboxArmToVc._

/* Execution of entities */
execute {
    match src=Einit { grant () }
    match src=kl.core.Core { grant () }
    match src=wpa.WpaSupplicant { grant () }

    match src=drone_controller.AutopilotConnector { grant () }
    match src=drone_controller.CredentialManager { grant () }
    match src=drone_controller.FlightController { grant () }
    match src=drone_controller.NavigationSystem { grant () }
    match src=drone_controller.PeripheryController { grant () }
    match src=drone_controller.ServerConnector { grant () }
}

/* Request messages */
request {
    match src=Einit { grant () }
    match src=kl.core.Core { grant () }
    match src=kl.VfsNet { grant () }
    match src=kl.drivers.BSP { grant () }
    match src=kl.drivers.GPIO { grant () }
    match src=kl.drivers.UART { grant () }
    match src=kl.drivers.I2C { grant () }
    match src=wpa.WpaSupplicant { grant () }

    match dst=kl.core.Core {
        match src=drone_controller.AutopilotConnector { grant () }
        match src=drone_controller.CredentialManager { grant () }
        match src=drone_controller.FlightController { grant () }
        match src=drone_controller.NavigationSystem { grant () }
        match src=drone_controller.PeripheryController { grant () }
        match src=drone_controller.ServerConnector { grant () }
    }

    match dst=kl.VfsNet {
        match src=drone_controller.ServerConnector { grant () }
    }

    match dst=kl.VfsSdCardFs {
        match src=drone_controller.CredentialManager { grant () }
    }

    match dst=wpa.WpaSupplicant src=drone_controller.ServerConnector { grant () }

    match dst=kl.drivers.BSP {
        match src=drone_controller.AutopilotConnector { grant () }
        match src=drone_controller.NavigationSystem { grant () }
        match src=drone_controller.PeripheryController { grant () }
    }

    match dst=kl.drivers.UART {
        match src=drone_controller.AutopilotConnector { grant () }
        match src=drone_controller.NavigationSystem { grant () }
    }

    match src=drone_controller.PeripheryController dst=kl.drivers.GPIO { grant () }

    match src=drone_controller.NavigationSystem dst=kl.drivers.I2C { grant () }

    match src=drone_controller.FlightController {
        match interface=drone_controller.Initialization method=WaitForInit {
            match dst=drone_controller.AutopilotConnector { grant () }
            match dst=drone_controller.CredentialManager { grant () }
            match dst=drone_controller.NavigationSystem { grant () }
            match dst=drone_controller.PeripheryController { grant () }
            match dst=drone_controller.ServerConnector { grant () }
        }
        match dst=drone_controller.AutopilotConnector interface=drone_controller.AutopilotConnectorInterface {
            match method=WaitForArmRequest { grant () }
            match method=PermitArm { grant () }
            match method=ForbidArm { grant () }
            match method=PauseFlight { grant () }
            match method=ResumeFlight { grant () }
            match method=ChangeSpeed { grant () }
            match method=ChangeAltitude { grant () }
            match method=ChangeWaypoint { grant () }
        }
        match dst=drone_controller.CredentialManager interface=drone_controller.CredentialManagerInterface {
            match method=SignMessage { grant () }
            match method=CheckSignature { grant () }
        }
        match dst=drone_controller.NavigationSystem interface=drone_controller.NavigationSystemInterface {
            match method=GetCoords { grant () }
            match method=GetGpsInfo { grant () }
        }
        match dst=drone_controller.PeripheryController interface=drone_controller.PeripheryControllerInterface {
            match method=EnableBuzzer { grant () }
            match method=SetKillSwitch { grant () }
            match method=SetCargoLock { grant () }
        }
        match dst=drone_controller.ServerConnector interface=drone_controller.ServerConnectorInterface {
            match method=SendRequest { grant () }
        }
    }

    match src=drone_controller.CredentialManager dst=drone_controller.ServerConnector interface=drone_controller.ServerConnectorInterface {
        match method=SendRequest { grant () }
    }

    match src=drone_controller.NavigationSystem {
        match dst=drone_controller.CredentialManager interface=drone_controller.CredentialManagerInterface {
            match method=SignMessage { grant () }
        }
        match dst=drone_controller.ServerConnector interface=drone_controller.ServerConnectorInterface {
            match method=SendRequest { grant () }
        }
    }

    match src=drone_controller.PeripheryController {
        match dst=drone_controller.CredentialManager interface=drone_controller.CredentialManagerInterface {
            match method=SignMessage { grant () }
            match method=CheckSignature { grant () }
        }
        match dst=drone_controller.ServerConnector interface=drone_controller.ServerConnectorInterface {
            match method=SendRequest { grant () }
        }
    }

    match dst=drone_controller.PeripheryController interface=drone_controller.Initialization method=WaitForInit {
        match src=drone_controller.AutopilotConnector { grant () }
        match src=drone_controller.NavigationSystem { grant () }
    }
}

/* Response messages */
response {
    match dst=Einit { grant () }
    match dst=kl.core.Core { grant () }
    match dst=kl.VfsNet { grant () }
    match dst=kl.drivers.BSP { grant () }
    match dst=kl.drivers.GPIO { grant () }
    match dst=kl.drivers.UART { grant () }
    match dst=kl.drivers.I2C { grant () }
    match dst=wpa.WpaSupplicant { grant () }

    match src=kl.core.Core {
        match dst=drone_controller.AutopilotConnector { grant () }
        match dst=drone_controller.CredentialManager { grant () }
        match dst=drone_controller.FlightController { grant () }
        match dst=drone_controller.NavigationSystem { grant () }
        match dst=drone_controller.PeripheryController { grant () }
        match dst=drone_controller.ServerConnector { grant () }
    }

    match src=kl.VfsNet {
        match dst=drone_controller.ServerConnector { grant () }
    }

    match src=kl.VfsSdCardFs {
        match dst=drone_controller.CredentialManager { grant () }
    }

    match src=wpa.WpaSupplicant dst=drone_controller.ServerConnector { grant () }

    match src=kl.drivers.BSP {
        match dst=drone_controller.AutopilotConnector { grant () }
        match dst=drone_controller.NavigationSystem { grant () }
        match dst=drone_controller.PeripheryController { grant () }
    }

    match src=kl.drivers.UART {
        match dst=drone_controller.AutopilotConnector { grant () }
        match dst=drone_controller.NavigationSystem { grant () }
    }

    match dst=drone_controller.PeripheryController src=kl.drivers.GPIO { grant () }

    match dst=drone_controller.NavigationSystem src=kl.drivers.I2C { grant () }

    match dst=drone_controller.FlightController {
        match interface=drone_controller.Initialization method=WaitForInit {
            match src=drone_controller.AutopilotConnector { grant () }
            match src=drone_controller.CredentialManager { grant () }
            match src=drone_controller.NavigationSystem { grant () }
            match src=drone_controller.PeripheryController { grant () }
            match src=drone_controller.ServerConnector { grant () }
        }
        match src=drone_controller.AutopilotConnector interface=drone_controller.AutopilotConnectorInterface {
            match method=WaitForArmRequest { grant () }
            match method=PermitArm { grant () }
            match method=ForbidArm { grant () }
            match method=PauseFlight { grant () }
            match method=ResumeFlight { grant () }
            match method=ChangeSpeed { grant () }
            match method=ChangeAltitude { grant () }
            match method=ChangeWaypoint { grant () }
        }
        match src=drone_controller.CredentialManager interface=drone_controller.CredentialManagerInterface {
            match method=SignMessage { grant () }
            match method=CheckSignature { grant () }
        }
        match src=drone_controller.NavigationSystem interface=drone_controller.NavigationSystemInterface {
            match method=GetCoords { grant () }
            match method=GetGpsInfo { grant () }
        }
        match src=drone_controller.PeripheryController interface=drone_controller.PeripheryControllerInterface {
            match method=EnableBuzzer { grant () }
            match method=SetKillSwitch { grant () }
            match method=SetCargoLock { grant () }
        }
        match src=drone_controller.ServerConnector interface=drone_controller.ServerConnectorInterface {
            match method=SendRequest { grant () }
        }
    }

    match dst=drone_controller.CredentialManager src=drone_controller.ServerConnector interface=drone_controller.ServerConnectorInterface {
        match method=SendRequest { grant () }
    }

    match dst=drone_controller.NavigationSystem {
        match src=drone_controller.CredentialManager interface=drone_controller.CredentialManagerInterface {
            match method=SignMessage { grant () }
        }
        match src=drone_controller.ServerConnector interface=drone_controller.ServerConnectorInterface {
            match method=SendRequest { grant () }
        }
    }

    match dst=drone_controller.PeripheryController {
        match src=drone_controller.CredentialManager interface=drone_controller.CredentialManagerInterface {
            match method=SignMessage { grant () }
            match method=CheckSignature { grant () }
        }
        match src=drone_controller.ServerConnector interface=drone_controller.ServerConnectorInterface {
            match method=SendRequest { grant () }
        }
    }

    match src=drone_controller.PeripheryController interface=drone_controller.Initialization method=WaitForInit {
        match dst=drone_controller.AutopilotConnector { grant () }
        match dst=drone_controller.NavigationSystem { grant () }
    }
}

/* Error calls */
error {
    grant ()
}

/* Security calls */
security {
    grant ()
}
